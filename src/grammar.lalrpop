use std::str::FromStr;
use ast::{Expr, BinaryOpCode, UnaryOpCode};

grammar;

pub Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::BinaryOp(<>)),
    NextTier
};

UnaryTier<Op, NextTier>: Box<Expr> = {
    Op UnaryTier<Op, NextTier> => Box::new(Expr::UnaryOp(<>)),
    NextTier,
};

pub Expr = OrTest;
OrTest = Tier<BoolOrOp, AndTest>;
AndTest = Tier<BoolAndOp, NotTest>;
NotTest = UnaryTier<BoolNotOp, ComparisonExpr>;
ComparisonExpr = {
    OrExpr ComparisonOp OrExpr => Box::new(Expr::BinaryOp(<>)),
    OrExpr,
};
OrExpr = Tier<BitOrOp, XorExpr>;
XorExpr = Tier<BitXorOp, AndExpr>;
AndExpr = Tier<BitAndOp, AExpr>;
AExpr = Tier<AOp, MExpr>;
MExpr = Tier<MOp, Term>;

ComparisonOp: BinaryOpCode = {
    "<" => BinaryOpCode::LessThan,
    "<=" => BinaryOpCode::LessThanOrEqual,
    ">" => BinaryOpCode::MoreThan,
    ">=" => BinaryOpCode::MoreThanOrEqual,
    "==" => BinaryOpCode::Equal,
    "!=" => BinaryOpCode::NotEqual,
};

BitOrOp: BinaryOpCode = { "|" => BinaryOpCode::BitOr };
BitXorOp: BinaryOpCode = { "^" => BinaryOpCode::BitXor };
BitAndOp: BinaryOpCode = { "&" => BinaryOpCode::BitAnd };
BoolNotOp: UnaryOpCode = { "not" => UnaryOpCode::BoolNot };
BoolOrOp: BinaryOpCode = { "or" => BinaryOpCode::BoolOr };
BoolAndOp: BinaryOpCode = { "and" => BinaryOpCode::BoolAnd };

AOp: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

MOp: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
};

Term: Box<Expr> = {
    IntegerLiteral => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

IntegerLiteral: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
