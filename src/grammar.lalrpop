use std::str::FromStr;
use ast::{Function, Statement, Expr, BinaryOpCode, UnaryOpCode, extract_string_literal};

grammar;

match {
    r"[0-9]+" => INTEGER,
    r"[a-zA-Z_]\w*" => IDENTIFIER,
    r"'[^']'" => CHAR,
    r#""[^"]*""# => STRING,
    "function",
    "return",
    "let",
    "if",
    "while",
    "(",
    ")",
    "{",
    "}",
    "]",
    "[",
    ";",
    ",",
    "=",
    "==",
    "<",
    "<=",
    "<<",
    ">",
    ">=",
    ">>",
    "!=",
    "&",
    "|",
    "^",
    "and",
    "or",
    "not",
    "+",
    "-",
    "~",
    "*",
    "%",
    "/",
}

pub Programme: Vec<Function> = <Function *>;
pub Function: Function = "function" <Identifier> "(" <Comma<Identifier>> ")" <Block> => Function::new(<>);

pub Statement = { <SimpleStatement> ";", BlockStatement };
SimpleStatement = { Return, ExprStmt, Assign, Declare };
Return: Statement = "return" <Expr> => Statement::Return(<>);
ExprStmt: Statement = <Expr> => Statement::Expr(<>);
Assign: Statement = <Expr> "=" <Expr> => Statement::Assign(<>);
Declare: Statement = "let" <Identifier> "=" <Expr> => Statement::Declare(<>);
BlockStatement = {If, While};
If: Statement = "if" <Expr> <Block> => Statement::If(<>);
While: Statement = "while" <Expr> <Block> => Statement::While(<>);
Block: Vec<Statement> = {
    "{" <Statement *> "}"
};

Tier<Op,NextTier>: Expr = {
    Tier<Op,NextTier> Op NextTier => Expr::new_binary_op(<>),
    NextTier
};

UnaryTier<Op, NextTier>: Expr = {
    Op UnaryTier<Op, NextTier> => Expr::new_unary_op(<>),
    NextTier,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Expr = OrTest;
OrTest = Tier<BoolOrOp, AndTest>;
AndTest = Tier<BoolAndOp, NotTest>;
NotTest = UnaryTier<BoolNotOp, ComparisonExpr>;
ComparisonExpr = {
    OrExpr ComparisonOp OrExpr => Expr::new_binary_op(<>),
    OrExpr,
};
OrExpr = Tier<BitOrOp, XorExpr>;
XorExpr = Tier<BitXorOp, AndExpr>;
AndExpr = Tier<BitAndOp, ShiftExpr>;
ShiftExpr = Tier<ShiftOp, AExpr>;
AExpr = Tier<AOp, MExpr>;
MExpr = Tier<MOp, UExpr>;
UExpr = UnaryTier<UOp, Primary>;

Primary = {Call, Subscription, Atom};
Call: Expr = <Identifier> "(" <ExpressionList> ")" => Expr::Call(<>);
Identifier: String = IDENTIFIER => <>.to_string();
ExpressionList = Comma<Expr>;

Subscription: Expr = <Primary> "[" <Expr> "]" => Expr::new_subscription(<>);

Atom: Expr = {
    IntegerLiteral => Expr::Number(<>),
    ArrayLiteral => Expr::Array(<>),
    CharacterLiteral => Expr::Char(<>),
    StringLiteral => Expr::String(<>),
    Identifier => Expr::Identifier(<>),
    "(" <Expr> ")"
};

IntegerLiteral: i32 = INTEGER => i32::from_str(<>).unwrap();
ArrayLiteral = "[" <ExpressionList> "]";
CharacterLiteral: char = CHAR => <>.chars().nth(1).unwrap();
StringLiteral: String = STRING => extract_string_literal(<>);

ComparisonOp: BinaryOpCode = {
    "<" => BinaryOpCode::LessThan,
    "<=" => BinaryOpCode::LessThanOrEqual,
    ">" => BinaryOpCode::MoreThan,
    ">=" => BinaryOpCode::MoreThanOrEqual,
    "==" => BinaryOpCode::Equal,
    "!=" => BinaryOpCode::NotEqual,
};

BitOrOp: BinaryOpCode = "|" => BinaryOpCode::BitOr;
BitXorOp: BinaryOpCode = "^" => BinaryOpCode::BitXor;
BitAndOp: BinaryOpCode = "&" => BinaryOpCode::BitAnd;
BoolNotOp: UnaryOpCode = "not" => UnaryOpCode::BoolNot;
BoolOrOp: BinaryOpCode = "or" => BinaryOpCode::BoolOr;
BoolAndOp: BinaryOpCode = "and" => BinaryOpCode::BoolAnd;

ShiftOp: BinaryOpCode = {
    "<<" => BinaryOpCode::LeftShift,
    ">>" => BinaryOpCode::RightShift,
};

AOp: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

MOp: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
    "%" => BinaryOpCode::Mod,
};

UOp: UnaryOpCode = {
    "-" => UnaryOpCode::Neg,
    "+" => UnaryOpCode::Plus,
    "~" => UnaryOpCode::BitNot,
};
