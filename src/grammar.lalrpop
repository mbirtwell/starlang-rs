use ast::{Function, Statement, Expr, BinaryOpCode, UnaryOpCode};
use lexer;

grammar<'input>;

extern {
    type Location = lexer::Location;
    type Error = lexer::Error;

    enum lexer::Tok<'input> {
        INTEGER => lexer::Tok::Integer(<i32>),
        IDENTIFIER => lexer::Tok::Identifier(<&'input str>),
        CHAR => lexer::Tok::Char(<char>),
        STRING => lexer::Tok::String(<&'input str>),
        "function" => lexer::Tok::Function,
        "return" => lexer::Tok::Return,
        "let" => lexer::Tok::Let,
        "if" => lexer::Tok::If,
        "while" => lexer::Tok::While,
        "and" => lexer::Tok::And,
        "or" => lexer::Tok::Or,
        "not" => lexer::Tok::Not,
        "(" => lexer::Tok::LeftParen,
        ")" => lexer::Tok::RightParen,
        "{" => lexer::Tok::LeftBrace,
        "}" => lexer::Tok::RightBrace,
        "]" => lexer::Tok::LeftBracket,
        "[" => lexer::Tok::RightBracket,
        ";" => lexer::Tok::SemiColon,
        "," => lexer::Tok::Comma,
        "=" => lexer::Tok::Equal,
        "<" => lexer::Tok::LessThan,
        ">" => lexer::Tok::MoreThan,
        "<=" => lexer::Tok::LessThanOrEqual,
        ">=" => lexer::Tok::MoreThanOrEqual,
        "<<" => lexer::Tok::LeftShift,
        ">>" => lexer::Tok::RightShift,
        "==" => lexer::Tok::DoubleEqual,
        "!=" => lexer::Tok::NotEqual,
        "&" => lexer::Tok::Ampersand,
        "|" => lexer::Tok::Pipe,
        "^" => lexer::Tok::Caret,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "~" => lexer::Tok::Tilde,
        "*" => lexer::Tok::Asterisk,
        "%" => lexer::Tok::Percent,
        "/" => lexer::Tok::ForwardSlash,
    }
}

pub Programme: Vec<Function> = <Function *>;
pub Function: Function = "function" <Identifier> "(" <Comma<Identifier>> ")" <Block> => Function::new(<>);

pub Statement = { <SimpleStatement> ";", BlockStatement };
SimpleStatement = { Return, ExprStmt, Assign, Declare };
Return: Statement = "return" <Expr> => Statement::Return(<>);
ExprStmt: Statement = <Expr> => Statement::Expr(<>);
Assign: Statement = <Expr> "=" <Expr> => Statement::Assign(<>);
Declare: Statement = "let" <Identifier> "=" <Expr> => Statement::Declare(<>);
BlockStatement = {If, While};
If: Statement = "if" <Expr> <Block> => Statement::If(<>);
While: Statement = "while" <Expr> <Block> => Statement::While(<>);
Block: Vec<Statement> = {
    "{" <Statement *> "}"
};

Tier<Op,NextTier>: Expr = {
    Tier<Op,NextTier> Op NextTier => Expr::new_binary_op(<>),
    NextTier
};

UnaryTier<Op, NextTier>: Expr = {
    Op UnaryTier<Op, NextTier> => Expr::new_unary_op(<>),
    NextTier,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Expr = OrTest;
OrTest = Tier<BoolOrOp, AndTest>;
AndTest = Tier<BoolAndOp, NotTest>;
NotTest = UnaryTier<BoolNotOp, ComparisonExpr>;
ComparisonExpr = {
    OrExpr ComparisonOp OrExpr => Expr::new_binary_op(<>),
    OrExpr,
};
OrExpr = Tier<BitOrOp, XorExpr>;
XorExpr = Tier<BitXorOp, AndExpr>;
AndExpr = Tier<BitAndOp, ShiftExpr>;
ShiftExpr = Tier<ShiftOp, AExpr>;
AExpr = Tier<AOp, MExpr>;
MExpr = Tier<MOp, UExpr>;
UExpr = UnaryTier<UOp, Primary>;

Primary = {Call, Subscription, Atom};
Call: Expr = <Identifier> "(" <ExpressionList> ")" => Expr::Call(<>);
Identifier: String = IDENTIFIER => <>.to_string();
ExpressionList = Comma<Expr>;

Subscription: Expr = <Primary> "[" <Expr> "]" => Expr::new_subscription(<>);

Atom: Expr = {
    INTEGER => Expr::Number(<>),
    ArrayLiteral => Expr::Array(<>),
    CHAR => Expr::Char(<>),
    STRING => Expr::String(<>.to_string()),
    IDENTIFIER => Expr::Identifier(<>.to_string()),
    "(" <Expr> ")"
};

ArrayLiteral = "[" <ExpressionList> "]";

ComparisonOp: BinaryOpCode = {
    "<" => BinaryOpCode::LessThan,
    "<=" => BinaryOpCode::LessThanOrEqual,
    ">" => BinaryOpCode::MoreThan,
    ">=" => BinaryOpCode::MoreThanOrEqual,
    "==" => BinaryOpCode::Equal,
    "!=" => BinaryOpCode::NotEqual,
};

BitOrOp: BinaryOpCode = "|" => BinaryOpCode::BitOr;
BitXorOp: BinaryOpCode = "^" => BinaryOpCode::BitXor;
BitAndOp: BinaryOpCode = "&" => BinaryOpCode::BitAnd;
BoolNotOp: UnaryOpCode = "not" => UnaryOpCode::BoolNot;
BoolOrOp: BinaryOpCode = "or" => BinaryOpCode::BoolOr;
BoolAndOp: BinaryOpCode = "and" => BinaryOpCode::BoolAnd;

ShiftOp: BinaryOpCode = {
    "<<" => BinaryOpCode::LeftShift,
    ">>" => BinaryOpCode::RightShift,
};

AOp: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

MOp: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
    "%" => BinaryOpCode::Mod,
};

UOp: UnaryOpCode = {
    "-" => UnaryOpCode::Neg,
    "+" => UnaryOpCode::Plus,
    "~" => UnaryOpCode::BitNot,
};
