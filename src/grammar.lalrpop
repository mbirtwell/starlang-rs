use std::str::FromStr;
use ast::{Expr, Opcode};

grammar;

pub Exprs = Comma<Expr>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

pub Expr = OrTest;
OrTest = Tier<OrOp, AndTest>;
AndTest = Tier<AndOp, AExpr>;
AExpr = Tier<AOp, MExpr>;
MExpr = Tier<MOp, Term>;

OrOp: Opcode = {
    "or" => Opcode::BoolOr,
};

AndOp: Opcode = {
    "and" => Opcode::BoolAnd,
};

AOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

MOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    IntegerLiteral => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

IntegerLiteral: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
