use std::str::FromStr;
use ast::{Statement, Expr, BinaryOpCode, UnaryOpCode, extract_string_literal};

grammar;

pub Statement = { <SimpleStatement> ";", BlockStatement };
SimpleStatement = { Return, ExprStmt, Assign, Declare };
Return: Box<Statement> = "return" <Expr> => Box::new(Statement::Return(<>));
ExprStmt: Box<Statement> = <Expr> => Box::new(Statement::Expr(<>));
Assign: Box<Statement> = <Expr> "=" <Expr> => Box::new(Statement::Assign(<>));
Declare: Box<Statement> = "let" <Identifier> "=" <Expr> => Box::new(Statement::Declare(<>));
BlockStatement = {If, While};
If: Box<Statement> = "if" <Expr> <Block> => Box::new(Statement::If(<>));
While: Box<Statement> = "while" <Expr> <Block> => Box::new(Statement::While(<>));
Block: Vec<Box<Statement>> = {
    "{" <Statement *> "}"
};

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::BinaryOp(<>)),
    NextTier
};

UnaryTier<Op, NextTier>: Box<Expr> = {
    Op UnaryTier<Op, NextTier> => Box::new(Expr::UnaryOp(<>)),
    NextTier,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Expr = OrTest;
OrTest = Tier<BoolOrOp, AndTest>;
AndTest = Tier<BoolAndOp, NotTest>;
NotTest = UnaryTier<BoolNotOp, ComparisonExpr>;
ComparisonExpr = {
    OrExpr ComparisonOp OrExpr => Box::new(Expr::BinaryOp(<>)),
    OrExpr,
};
OrExpr = Tier<BitOrOp, XorExpr>;
XorExpr = Tier<BitXorOp, AndExpr>;
AndExpr = Tier<BitAndOp, ShiftExpr>;
ShiftExpr = Tier<ShiftOp, AExpr>;
AExpr = Tier<AOp, MExpr>;
MExpr = Tier<MOp, UExpr>;
UExpr = UnaryTier<UOp, Primary>;

Primary = {Call, Subscription, Atom};
Call: Box<Expr> = <Identifier> "(" <ExpressionList> ")" => Box::new(Expr::Call(<>));
Identifier: String = r"[a-zA-Z_]\w*" => <>.to_string();
ExpressionList = Comma<Expr>;

Subscription: Box<Expr> = <Primary> "[" <Expr> "]" => Box::new(Expr::Subscription(<>));

Atom: Box<Expr> = {
    IntegerLiteral => Box::new(Expr::Number(<>)),
    ArrayLiteral => Box::new(Expr::Array(<>)),
    CharacterLiteral => Box::new(Expr::Char(<>)),
    StringLiteral => Box::new(Expr::String(<>)),
    Identifier => Box::new(Expr::Identifier(<>)),
    "(" <Expr> ")"
};

IntegerLiteral: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
ArrayLiteral = "[" <ExpressionList> "]";
CharacterLiteral: char = r"'[^']'" => <>.chars().nth(1).unwrap();
StringLiteral: String = r#""[^"]*""# => extract_string_literal(<>);

ComparisonOp: BinaryOpCode = {
    "<" => BinaryOpCode::LessThan,
    "<=" => BinaryOpCode::LessThanOrEqual,
    ">" => BinaryOpCode::MoreThan,
    ">=" => BinaryOpCode::MoreThanOrEqual,
    "==" => BinaryOpCode::Equal,
    "!=" => BinaryOpCode::NotEqual,
};

BitOrOp: BinaryOpCode = "|" => BinaryOpCode::BitOr;
BitXorOp: BinaryOpCode = "^" => BinaryOpCode::BitXor;
BitAndOp: BinaryOpCode = "&" => BinaryOpCode::BitAnd;
BoolNotOp: UnaryOpCode = "not" => UnaryOpCode::BoolNot;
BoolOrOp: BinaryOpCode = "or" => BinaryOpCode::BoolOr;
BoolAndOp: BinaryOpCode = "and" => BinaryOpCode::BoolAnd;

ShiftOp: BinaryOpCode = {
    "<<" => BinaryOpCode::LeftShift,
    ">>" => BinaryOpCode::RightShift,
};

AOp: BinaryOpCode = {
    "+" => BinaryOpCode::Add,
    "-" => BinaryOpCode::Sub,
};

MOp: BinaryOpCode = {
    "*" => BinaryOpCode::Mul,
    "/" => BinaryOpCode::Div,
    "%" => BinaryOpCode::Mod,
};

UOp: UnaryOpCode = {
    "-" => UnaryOpCode::Neg,
    "+" => UnaryOpCode::Plus,
    "~" => UnaryOpCode::BitNot,
};
